= minglr

* http://github.com/schubert/minglr/tree/master

== DESCRIPTION:

* This gem provides two executable binaries to interact with Mingle (http://mingle.thoughtworks.com/mingle-agile-project-management) through its API. It also has sample interactive Rake task on how to facilitate easy card movements when a card enters/exits the development queue.

* mtx is a binary that facilities transition changes for use on rake tasks
* minglr is a more interactive tool that provides a quick interface for many common uses

== MINGLR FEATURES:
* lists cards
	$ minglr cards
	266 - Task   - Development Complete  - Investigate new tool
	265 - Defect - New                   - The background is the wrong color

* list users
	$ minglr users
	schubert - Michael Schubert - michael@yourcompany.com

* list all cards with the word "foo"
	$ minglr cards foo

* list details for card 215
	$ minglr card 215
	     Number: 215
	       Name: Add the frobble to the bobble
	       Type: Story
	     Status: In Development
	Description: Lorem Ipsum

* create new story card
	$ minglr create -t Story -n "My New Story" -d "Story Description"
	Created story card 271

* update a card
	$ minglr update 271 -d "Bettter Description"
	Card 271 updated

	     Number: 271
	       Name: Add the frobble to the bobble
	       Type: Task
	     Status: Ready for Development
	Description: Better Description

* move card based on defined transitions
	$ minglr move 266 -c "All done with development"
	Moved card from In Development to Dev Complete

== MTX FEATURES:

* Executes a card transition through the Mingle API.
* Caches user-entered information during Rake task execution.
* SVN Rake tasks to perform update, remove, add, and conflict check.
* Sample Rake tasks to illustrate a single Rake command line that will grab latest changes, check for conflicts, run tests, check-in, and finally move card on Mingle.

== SYNOPSIS:

Do you forget to update a story card on Mingle when the card has moved into developers' hands? How about forgetting to update the story card to kick-off its sign off process when story is completed? If we let these sloppiness happen too often, communication flow will be hindered, and the time it takes to provide business value through story completions will be lengthened. Fortunately, Minglr can help.

Minglr allows you to write Rake tasks to execute Mingle card transitions as part of your build process. For example, for a developer to check-in new code, s/he could run the following Rake task:

$ rake check_in

At the end of this Rake task, it can execute a Mingle API call through the help of Minglr to execute the appropriate transition for the card being worked on, be it to move a card into 'In Development', or mark it as 'Story Completed'.

Of course, frequently additional user inputs are required to transition a card. For example, a card number and a comment. Minglr also provides Rake helpers to easily prompt users for inputs as part of their Rake runs, as well as caching them to save future typings.

Minglr can be used regardless your application is a Ruby on Rails web application or a simple Ruby application. In fact, it can even be used as a command line tool to transition cards on Mingle.

== INSTALL:

* sudo gem install schubert-minglr
* Preferably install rb-password (http://www.caliban.org/ruby/ruby-password.shtml), through Macports (sudo port install rb-password)
* Enable Mingle API basic authentication in auth_config.yml, then restart it.
* Copy over the "path-to-minglr/tasks/*.sample.rake" files and start customizing for your check-in needs.

== LICENSE:

(The MIT License)

Copyright (c) 2009 Michael Schubert
Copyright (c) 2009 Stephen Chu

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.